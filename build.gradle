import org.apache.tools.ant.filters.ReplaceTokens

group 'com.eduedu.chanping'
version '1.0'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'org.hidetake.ssh'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.akhikhl.gretty:gretty:1.4.0'
        classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'
    }
}


gretty {
    httpPort = 8080
    contextPath = ''
    servletContainer = 'tomcat7'
    serverConfigFile = 'server.xml'
    inplaceMode  = 'hard'
    debugSuspend = false
    managedClassReload      = true
    recompileOnSourceChange = false
}
tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

////////////////////////////////////////////////////////////////////////////////
//                                   Maven 依赖                               //
////////////////////////////////////////////////////////////////////////////////
repositories {
    //mavenLocal()
    //mavenCentral()
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
}

ext {
    // 运行和打包的环境选择, 默认是开发环境
    // 获取 gradle 参数中 -Dprofile 的值: gradle -Denv=production clean build
    //gradle clean appStart
    environment = System.getProperty("env", "development")
}

ext.versions = [
        spring:     '4.3.6.RELEASE',
        servlet:    '3.1.0',
        fastjson:   '1.2.17',
        freemarker: '2.3.23',
        junit:      '4.12'
]

dependencies {
    compile(
            "org.springframework:spring-webmvc:$versions.spring",            // Spring MVC
            "org.springframework:spring-context-support:$versions.spring",
            "com.alibaba:fastjson:$versions.fastjson",                         // JSON
            "org.freemarker:freemarker:$versions.freemarker",                 // Freemarker
            "ch.qos.logback:logback-classic:1.1.2",                         // logback
            "org.slf4j:jcl-over-slf4j:1.7.21",                                // override Spring native logging tool with logback
            "org.springframework:spring-jdbc:4.3.0.RELEASE",
            "mysql:mysql-connector-java:5.1.21",
            "org.mybatis:mybatis:3.2.1",
            "org.mybatis:mybatis-spring:1.2.2",
            "com.alibaba:druid:1.0.26",
            'org.apache.velocity:velocity:1.7'
    )
    compileOnly("javax.servlet:javax.servlet-api:$versions.servlet")
    testCompile("junit:junit:$versions.junit")

    compile group: 'org.springframework.security', name: 'spring-security-web', version: '4.2.1.RELEASE'
    compile group: 'org.springframework.security', name: 'spring-security-config', version: '4.2.1.RELEASE'
    compile 'org.springframework.data:spring-data-redis:1.7.4.RELEASE'
    compile 'org.springframework.session:spring-session-data-redis:1.2.2.RELEASE'
    compile 'com.alibaba:fastjson:1.2.24'
    compile 'org.projectlombok:lombok:1.16.10'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3'


}

////////////////////////////////////////////////////////////////////////////////
//                                   动态替换                                  //
////////////////////////////////////////////////////////////////////////////////
def loadConfiguration() {
    println "==> Load configuration for '" + environment + "'"
    def configFile = file('config.groovy') // 配置文件
    return new ConfigSlurper(environment).parse(configFile.toURI().toURL()).toProperties()
}

processResources {
    // src/main/resources 下的文件中 @key@ 的内容使用 config.groovy 里对应的进行替换
    from(sourceSets.main.resources.srcDirs) {
        filter(ReplaceTokens, tokens: loadConfiguration())
    }
}

war.archiveName 'cp.zip'

////////////////////////////////////////////////////////////////////////////////
//                                   Deploy                                   //
////////////////////////////////////////////////////////////////////////////////
remotes {
    webServerBJ194 {
        host = '120.92.26.194'
        user = 'root'
        password = 'tiger_sun'
    }
}

task deploybj {
    doLast {
        ssh.settings {
            knownHosts = allowAnyHosts
        }
        ssh.run {
            session(remotes.webServerBJ194) {
                put from: "${buildDir}/libs/cp.zip", into: '/data/chanpingongju/'
                execute """
                    source /root/.bash_profile;
                    /usr/local/edu/tomcat/bin/shutdown.sh;
                    rm -rf /data/chanpingongju/ROOT;
                    unzip /data/chanpingongju/cp.zip -d /data/chanpingongju/ROOT;
                    kill `ps aux | grep -i tomcat | grep -v grep | awk '{print \\\$2}'`;
                    /usr/local/edu/tomcat/bin/startup.sh;
                """
            }
        }
    }
}

deploybj.dependsOn assemble
assemble.dependsOn clean
